// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pkg/services/productsCategories/api.proto

package productsCategories_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsCategoriesServiceClient is the client API for ProductsCategoriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsCategoriesServiceClient interface {
	GetCategoryById(ctx context.Context, in *GetCategoryByID, opts ...grpc.CallOption) (*GetCategory, error)
}

type productsCategoriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsCategoriesServiceClient(cc grpc.ClientConnInterface) ProductsCategoriesServiceClient {
	return &productsCategoriesServiceClient{cc}
}

func (c *productsCategoriesServiceClient) GetCategoryById(ctx context.Context, in *GetCategoryByID, opts ...grpc.CallOption) (*GetCategory, error) {
	out := new(GetCategory)
	err := c.cc.Invoke(ctx, "/services.productsCategories_service.ProductsCategoriesService/GetCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsCategoriesServiceServer is the server API for ProductsCategoriesService service.
// All implementations must embed UnimplementedProductsCategoriesServiceServer
// for forward compatibility
type ProductsCategoriesServiceServer interface {
	GetCategoryById(context.Context, *GetCategoryByID) (*GetCategory, error)
	mustEmbedUnimplementedProductsCategoriesServiceServer()
}

// UnimplementedProductsCategoriesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductsCategoriesServiceServer struct {
}

func (UnimplementedProductsCategoriesServiceServer) GetCategoryById(context.Context, *GetCategoryByID) (*GetCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedProductsCategoriesServiceServer) mustEmbedUnimplementedProductsCategoriesServiceServer() {
}

// UnsafeProductsCategoriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsCategoriesServiceServer will
// result in compilation errors.
type UnsafeProductsCategoriesServiceServer interface {
	mustEmbedUnimplementedProductsCategoriesServiceServer()
}

func RegisterProductsCategoriesServiceServer(s grpc.ServiceRegistrar, srv ProductsCategoriesServiceServer) {
	s.RegisterService(&ProductsCategoriesService_ServiceDesc, srv)
}

func _ProductsCategoriesService_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsCategoriesServiceServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.productsCategories_service.ProductsCategoriesService/GetCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsCategoriesServiceServer).GetCategoryById(ctx, req.(*GetCategoryByID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductsCategoriesService_ServiceDesc is the grpc.ServiceDesc for ProductsCategoriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsCategoriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.productsCategories_service.ProductsCategoriesService",
	HandlerType: (*ProductsCategoriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryById",
			Handler:    _ProductsCategoriesService_GetCategoryById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/services/productsCategories/api.proto",
}
