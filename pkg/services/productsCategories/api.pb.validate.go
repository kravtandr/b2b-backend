// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/services/productsCategories/api.proto

package productsCategories_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCategoryByID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryByID with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryByIDMultiError, or nil if none found.
func (m *GetCategoryByID) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCategoryByIDValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCategoryByIDMultiError(errors)
	}
	return nil
}

// GetCategoryByIDMultiError is an error wrapping multiple validation errors
// returned by GetCategoryByID.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryByIDMultiError) AllErrors() []error { return m }

// GetCategoryByIDValidationError is the validation error returned by
// GetCategoryByID.Validate if the designated constraints aren't met.
type GetCategoryByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryByIDValidationError) ErrorName() string { return "GetCategoryByIDValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoryByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryByIDValidationError{}

// Validate checks the field values on GetProductByID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProductByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductByIDMultiError,
// or nil if none found.
func (m *GetProductByID) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductByIDValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductByIDMultiError(errors)
	}
	return nil
}

// GetProductByIDMultiError is an error wrapping multiple validation errors
// returned by GetProductByID.ValidateAll() if the designated constraints
// aren't met.
type GetProductByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIDMultiError) AllErrors() []error { return m }

// GetProductByIDValidationError is the validation error returned by
// GetProductByID.Validate if the designated constraints aren't met.
type GetProductByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIDValidationError) ErrorName() string { return "GetProductByIDValidationError" }

// Error satisfies the builtin error interface
func (e GetProductByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIDValidationError{}

// Validate checks the field values on SearchItemNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchItemNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchItemNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchItemNameRequestMultiError, or nil if none found.
func (m *SearchItemNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchItemNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return SearchItemNameRequestMultiError(errors)
	}
	return nil
}

// SearchItemNameRequestMultiError is an error wrapping multiple validation
// errors returned by SearchItemNameRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchItemNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchItemNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchItemNameRequestMultiError) AllErrors() []error { return m }

// SearchItemNameRequestValidationError is the validation error returned by
// SearchItemNameRequest.Validate if the designated constraints aren't met.
type SearchItemNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchItemNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchItemNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchItemNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchItemNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchItemNameRequestValidationError) ErrorName() string {
	return "SearchItemNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchItemNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchItemNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchItemNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchItemNameRequestValidationError{}

// Validate checks the field values on SearchItemNameWithSkipLimitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SearchItemNameWithSkipLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchItemNameWithSkipLimitRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SearchItemNameWithSkipLimitRequestMultiError, or nil if none found.
func (m *SearchItemNameWithSkipLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchItemNameWithSkipLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Skip

	// no validation rules for Limit

	if len(errors) > 0 {
		return SearchItemNameWithSkipLimitRequestMultiError(errors)
	}
	return nil
}

// SearchItemNameWithSkipLimitRequestMultiError is an error wrapping multiple
// validation errors returned by
// SearchItemNameWithSkipLimitRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchItemNameWithSkipLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchItemNameWithSkipLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchItemNameWithSkipLimitRequestMultiError) AllErrors() []error { return m }

// SearchItemNameWithSkipLimitRequestValidationError is the validation error
// returned by SearchItemNameWithSkipLimitRequest.Validate if the designated
// constraints aren't met.
type SearchItemNameWithSkipLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchItemNameWithSkipLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchItemNameWithSkipLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchItemNameWithSkipLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchItemNameWithSkipLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchItemNameWithSkipLimitRequestValidationError) ErrorName() string {
	return "SearchItemNameWithSkipLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchItemNameWithSkipLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchItemNameWithSkipLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchItemNameWithSkipLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchItemNameWithSkipLimitRequestValidationError{}

// Validate checks the field values on GetProductsListByFiltersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsListByFiltersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsListByFiltersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductsListByFiltersRequestMultiError, or nil if none found.
func (m *GetProductsListByFiltersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsListByFiltersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for CategoryName

	// no validation rules for PriceLowerLimit

	// no validation rules for PriceHigherLimit

	// no validation rules for Skip

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetProductsListByFiltersRequestMultiError(errors)
	}
	return nil
}

// GetProductsListByFiltersRequestMultiError is an error wrapping multiple
// validation errors returned by GetProductsListByFiltersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProductsListByFiltersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsListByFiltersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsListByFiltersRequestMultiError) AllErrors() []error { return m }

// GetProductsListByFiltersRequestValidationError is the validation error
// returned by GetProductsListByFiltersRequest.Validate if the designated
// constraints aren't met.
type GetProductsListByFiltersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsListByFiltersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsListByFiltersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsListByFiltersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsListByFiltersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsListByFiltersRequestValidationError) ErrorName() string {
	return "GetProductsListByFiltersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsListByFiltersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsListByFiltersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsListByFiltersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsListByFiltersRequestValidationError{}

// Validate checks the field values on AddProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProductRequestMultiError, or nil if none found.
func (m *AddProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CategoryId

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddProductRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddProductRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProductRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for Amount

	// no validation rules for PayWay

	// no validation rules for Adress

	// no validation rules for DeliveryWay

	// no validation rules for UserId

	// no validation rules for CompanyId

	if len(errors) > 0 {
		return AddProductRequestMultiError(errors)
	}
	return nil
}

// AddProductRequestMultiError is an error wrapping multiple validation errors
// returned by AddProductRequest.ValidateAll() if the designated constraints
// aren't met.
type AddProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProductRequestMultiError) AllErrors() []error { return m }

// AddProductRequestValidationError is the validation error returned by
// AddProductRequest.Validate if the designated constraints aren't met.
type AddProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductRequestValidationError) ErrorName() string {
	return "AddProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductRequestValidationError{}

// Validate checks the field values on SqlNullString with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SqlNullString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SqlNullString with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SqlNullStringMultiError, or
// nil if none found.
func (m *SqlNullString) ValidateAll() error {
	return m.validate(true)
}

func (m *SqlNullString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for String_

	// no validation rules for Valid

	if len(errors) > 0 {
		return SqlNullStringMultiError(errors)
	}
	return nil
}

// SqlNullStringMultiError is an error wrapping multiple validation errors
// returned by SqlNullString.ValidateAll() if the designated constraints
// aren't met.
type SqlNullStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SqlNullStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SqlNullStringMultiError) AllErrors() []error { return m }

// SqlNullStringValidationError is the validation error returned by
// SqlNullString.Validate if the designated constraints aren't met.
type SqlNullStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SqlNullStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SqlNullStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SqlNullStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SqlNullStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SqlNullStringValidationError) ErrorName() string { return "SqlNullStringValidationError" }

// Error satisfies the builtin error interface
func (e SqlNullStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSqlNullString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SqlNullStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SqlNullStringValidationError{}

// Validate checks the field values on GetCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCategoryMultiError, or
// nil if none found.
func (m *GetCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryMultiError(errors)
	}
	return nil
}

// GetCategoryMultiError is an error wrapping multiple validation errors
// returned by GetCategory.ValidateAll() if the designated constraints aren't met.
type GetCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryMultiError) AllErrors() []error { return m }

// GetCategoryValidationError is the validation error returned by
// GetCategory.Validate if the designated constraints aren't met.
type GetCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryValidationError) ErrorName() string { return "GetCategoryValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryValidationError{}

// Validate checks the field values on GetCategories with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCategories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategories with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCategoriesMultiError, or
// nil if none found.
func (m *GetCategories) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoriesValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoriesValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoriesValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoriesMultiError(errors)
	}
	return nil
}

// GetCategoriesMultiError is an error wrapping multiple validation errors
// returned by GetCategories.ValidateAll() if the designated constraints
// aren't met.
type GetCategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoriesMultiError) AllErrors() []error { return m }

// GetCategoriesValidationError is the validation error returned by
// GetCategories.Validate if the designated constraints aren't met.
type GetCategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesValidationError) ErrorName() string { return "GetCategoriesValidationError" }

// Error satisfies the builtin error interface
func (e GetCategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesValidationError{}

// Validate checks the field values on GetProduct with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetProduct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProduct with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetProductMultiError, or
// nil if none found.
func (m *GetProduct) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProduct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	if len(errors) > 0 {
		return GetProductMultiError(errors)
	}
	return nil
}

// GetProductMultiError is an error wrapping multiple validation errors
// returned by GetProduct.ValidateAll() if the designated constraints aren't met.
type GetProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductMultiError) AllErrors() []error { return m }

// GetProductValidationError is the validation error returned by
// GetProduct.Validate if the designated constraints aren't met.
type GetProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductValidationError) ErrorName() string { return "GetProductValidationError" }

// Error satisfies the builtin error interface
func (e GetProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductValidationError{}

// Validate checks the field values on ProductWithCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductWithCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductWithCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductWithCategoryMultiError, or nil if none found.
func (m *ProductWithCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductWithCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductWithCategoryValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductWithCategoryValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductWithCategoryValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Price

	// no validation rules for CategoryId

	// no validation rules for CategoryName

	if len(errors) > 0 {
		return ProductWithCategoryMultiError(errors)
	}
	return nil
}

// ProductWithCategoryMultiError is an error wrapping multiple validation
// errors returned by ProductWithCategory.ValidateAll() if the designated
// constraints aren't met.
type ProductWithCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductWithCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductWithCategoryMultiError) AllErrors() []error { return m }

// ProductWithCategoryValidationError is the validation error returned by
// ProductWithCategory.Validate if the designated constraints aren't met.
type ProductWithCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductWithCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductWithCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductWithCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductWithCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductWithCategoryValidationError) ErrorName() string {
	return "ProductWithCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e ProductWithCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductWithCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductWithCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductWithCategoryValidationError{}

// Validate checks the field values on GetProductsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsListRequestMultiError, or nil if none found.
func (m *GetProductsListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Limit

	if len(errors) > 0 {
		return GetProductsListRequestMultiError(errors)
	}
	return nil
}

// GetProductsListRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductsListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductsListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsListRequestMultiError) AllErrors() []error { return m }

// GetProductsListRequestValidationError is the validation error returned by
// GetProductsListRequest.Validate if the designated constraints aren't met.
type GetProductsListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsListRequestValidationError) ErrorName() string {
	return "GetProductsListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsListRequestValidationError{}

// Validate checks the field values on GetProductsListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsListResponseMultiError, or nil if none found.
func (m *GetProductsListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductsListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductsListResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductsListResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProductsListResponseMultiError(errors)
	}
	return nil
}

// GetProductsListResponseMultiError is an error wrapping multiple validation
// errors returned by GetProductsListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProductsListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsListResponseMultiError) AllErrors() []error { return m }

// GetProductsListResponseValidationError is the validation error returned by
// GetProductsListResponse.Validate if the designated constraints aren't met.
type GetProductsListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsListResponseValidationError) ErrorName() string {
	return "GetProductsListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsListResponseValidationError{}

// Validate checks the field values on GetProductsByFiltersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductsByFiltersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductsByFiltersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductsByFiltersResponseMultiError, or nil if none found.
func (m *GetProductsByFiltersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductsByFiltersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProductsByFiltersResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProductsByFiltersResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProductsByFiltersResponseValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProductsByFiltersResponseMultiError(errors)
	}
	return nil
}

// GetProductsByFiltersResponseMultiError is an error wrapping multiple
// validation errors returned by GetProductsByFiltersResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProductsByFiltersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductsByFiltersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductsByFiltersResponseMultiError) AllErrors() []error { return m }

// GetProductsByFiltersResponseValidationError is the validation error returned
// by GetProductsByFiltersResponse.Validate if the designated constraints
// aren't met.
type GetProductsByFiltersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductsByFiltersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductsByFiltersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductsByFiltersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductsByFiltersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductsByFiltersResponseValidationError) ErrorName() string {
	return "GetProductsByFiltersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductsByFiltersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductsByFiltersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductsByFiltersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductsByFiltersResponseValidationError{}
