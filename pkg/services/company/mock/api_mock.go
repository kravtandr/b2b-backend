// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/services/company/api_grpc.pb.go

// Package mock_company_service is a generated GoMock package.
package mock_company_service

import (
	company_service "b2b/m/pkg/services/company"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCompanyServiceClient is a mock of CompanyServiceClient interface.
type MockCompanyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceClientMockRecorder
}

// MockCompanyServiceClientMockRecorder is the mock recorder for MockCompanyServiceClient.
type MockCompanyServiceClientMockRecorder struct {
	mock *MockCompanyServiceClient
}

// NewMockCompanyServiceClient creates a new mock instance.
func NewMockCompanyServiceClient(ctrl *gomock.Controller) *MockCompanyServiceClient {
	mock := &MockCompanyServiceClient{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyServiceClient) EXPECT() *MockCompanyServiceClientMockRecorder {
	return m.recorder
}

// GetCompanyById mocks base method.
func (m *MockCompanyServiceClient) GetCompanyById(ctx context.Context, in *company_service.GetCompanyRequestById, opts ...grpc.CallOption) (*company_service.GetCompanyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCompanyById", varargs...)
	ret0, _ := ret[0].(*company_service.GetCompanyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockCompanyServiceClientMockRecorder) GetCompanyById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockCompanyServiceClient)(nil).GetCompanyById), varargs...)
}

// MockCompanyServiceServer is a mock of CompanyServiceServer interface.
type MockCompanyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyServiceServerMockRecorder
}

// MockCompanyServiceServerMockRecorder is the mock recorder for MockCompanyServiceServer.
type MockCompanyServiceServerMockRecorder struct {
	mock *MockCompanyServiceServer
}

// NewMockCompanyServiceServer creates a new mock instance.
func NewMockCompanyServiceServer(ctrl *gomock.Controller) *MockCompanyServiceServer {
	mock := &MockCompanyServiceServer{ctrl: ctrl}
	mock.recorder = &MockCompanyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyServiceServer) EXPECT() *MockCompanyServiceServerMockRecorder {
	return m.recorder
}

// GetCompanyById mocks base method.
func (m *MockCompanyServiceServer) GetCompanyById(arg0 context.Context, arg1 *company_service.GetCompanyRequestById) (*company_service.GetCompanyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyById", arg0, arg1)
	ret0, _ := ret[0].(*company_service.GetCompanyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyById indicates an expected call of GetCompanyById.
func (mr *MockCompanyServiceServerMockRecorder) GetCompanyById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyById", reflect.TypeOf((*MockCompanyServiceServer)(nil).GetCompanyById), arg0, arg1)
}

// mustEmbedUnimplementedCompanyServiceServer mocks base method.
func (m *MockCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCompanyServiceServer")
}

// mustEmbedUnimplementedCompanyServiceServer indicates an expected call of mustEmbedUnimplementedCompanyServiceServer.
func (mr *MockCompanyServiceServerMockRecorder) mustEmbedUnimplementedCompanyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCompanyServiceServer", reflect.TypeOf((*MockCompanyServiceServer)(nil).mustEmbedUnimplementedCompanyServiceServer))
}

// MockUnsafeCompanyServiceServer is a mock of UnsafeCompanyServiceServer interface.
type MockUnsafeCompanyServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCompanyServiceServerMockRecorder
}

// MockUnsafeCompanyServiceServerMockRecorder is the mock recorder for MockUnsafeCompanyServiceServer.
type MockUnsafeCompanyServiceServerMockRecorder struct {
	mock *MockUnsafeCompanyServiceServer
}

// NewMockUnsafeCompanyServiceServer creates a new mock instance.
func NewMockUnsafeCompanyServiceServer(ctrl *gomock.Controller) *MockUnsafeCompanyServiceServer {
	mock := &MockUnsafeCompanyServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCompanyServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCompanyServiceServer) EXPECT() *MockUnsafeCompanyServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCompanyServiceServer mocks base method.
func (m *MockUnsafeCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCompanyServiceServer")
}

// mustEmbedUnimplementedCompanyServiceServer indicates an expected call of mustEmbedUnimplementedCompanyServiceServer.
func (mr *MockUnsafeCompanyServiceServerMockRecorder) mustEmbedUnimplementedCompanyServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCompanyServiceServer", reflect.TypeOf((*MockUnsafeCompanyServiceServer)(nil).mustEmbedUnimplementedCompanyServiceServer))
}
