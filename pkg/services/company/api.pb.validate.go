// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/services/company/api.proto

package company_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCompanyRequestByInn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyRequestByInn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyRequestByInn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyRequestByInnMultiError, or nil if none found.
func (m *GetCompanyRequestByInn) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyRequestByInn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetInn()); l < 10 || l > 12 {
		err := GetCompanyRequestByInnValidationError{
			field:  "Inn",
			reason: "value length must be between 10 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetInn()) < 1 {
		err := GetCompanyRequestByInnValidationError{
			field:  "Inn",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCompanyRequestByInnMultiError(errors)
	}
	return nil
}

// GetCompanyRequestByInnMultiError is an error wrapping multiple validation
// errors returned by GetCompanyRequestByInn.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyRequestByInnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyRequestByInnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyRequestByInnMultiError) AllErrors() []error { return m }

// GetCompanyRequestByInnValidationError is the validation error returned by
// GetCompanyRequestByInn.Validate if the designated constraints aren't met.
type GetCompanyRequestByInnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRequestByInnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRequestByInnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRequestByInnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRequestByInnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRequestByInnValidationError) ErrorName() string {
	return "GetCompanyRequestByInnValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRequestByInnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRequestByInn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRequestByInnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRequestByInnValidationError{}

// Validate checks the field values on GetCompanyRequestById with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyRequestById) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyRequestById with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyRequestByIdMultiError, or nil if none found.
func (m *GetCompanyRequestById) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyRequestById) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCompanyRequestByIdValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCompanyRequestByIdMultiError(errors)
	}
	return nil
}

// GetCompanyRequestByIdMultiError is an error wrapping multiple validation
// errors returned by GetCompanyRequestById.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyRequestByIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyRequestByIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyRequestByIdMultiError) AllErrors() []error { return m }

// GetCompanyRequestByIdValidationError is the validation error returned by
// GetCompanyRequestById.Validate if the designated constraints aren't met.
type GetCompanyRequestByIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRequestByIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRequestByIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRequestByIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRequestByIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRequestByIdValidationError) ErrorName() string {
	return "GetCompanyRequestByIdValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRequestByIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRequestById.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRequestByIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRequestByIdValidationError{}

// Validate checks the field values on IdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestMultiError, or nil
// if none found.
func (m *IdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestMultiError(errors)
	}
	return nil
}

// IdRequestMultiError is an error wrapping multiple validation errors returned
// by IdRequest.ValidateAll() if the designated constraints aren't met.
type IdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestMultiError) AllErrors() []error { return m }

// IdRequestValidationError is the validation error returned by
// IdRequest.Validate if the designated constraints aren't met.
type IdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestValidationError) ErrorName() string { return "IdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestValidationError{}

// Validate checks the field values on GetPrivateCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPrivateCompanyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPrivateCompanyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPrivateCompanyResponseMultiError, or nil if none found.
func (m *GetPrivateCompanyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPrivateCompanyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetPrivateCompanyResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LegalName

	if l := utf8.RuneCountInString(m.GetItn()); l < 10 || l > 12 {
		err := GetPrivateCompanyResponseValidationError{
			field:  "Itn",
			reason: "value length must be between 10 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItn()) < 1 {
		err := GetPrivateCompanyResponseValidationError{
			field:  "Itn",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Psrn

	// no validation rules for Address

	// no validation rules for LegalAddress

	if utf8.RuneCountInString(m.GetEmail()) > 128 {
		err := GetPrivateCompanyResponseValidationError{
			field:  "Email",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetPrivateCompanyResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Link

	// no validation rules for Activity

	if m.GetOwnerId() <= 0 {
		err := GetPrivateCompanyResponseValidationError{
			field:  "OwnerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rating

	// no validation rules for Verified

	// no validation rules for Photo

	if len(errors) > 0 {
		return GetPrivateCompanyResponseMultiError(errors)
	}
	return nil
}

func (m *GetPrivateCompanyResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetPrivateCompanyResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetPrivateCompanyResponseMultiError is an error wrapping multiple validation
// errors returned by GetPrivateCompanyResponse.ValidateAll() if the
// designated constraints aren't met.
type GetPrivateCompanyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPrivateCompanyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPrivateCompanyResponseMultiError) AllErrors() []error { return m }

// GetPrivateCompanyResponseValidationError is the validation error returned by
// GetPrivateCompanyResponse.Validate if the designated constraints aren't met.
type GetPrivateCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivateCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivateCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivateCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivateCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivateCompanyResponseValidationError) ErrorName() string {
	return "GetPrivateCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivateCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivateCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivateCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivateCompanyResponseValidationError{}

// Validate checks the field values on GetCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyResponseMultiError, or nil if none found.
func (m *GetCompanyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LegalName

	if l := utf8.RuneCountInString(m.GetItn()); l < 10 || l > 12 {
		err := GetCompanyResponseValidationError{
			field:  "Itn",
			reason: "value length must be between 10 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItn()) < 1 {
		err := GetCompanyResponseValidationError{
			field:  "Itn",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Psrn

	// no validation rules for Address

	// no validation rules for LegalAddress

	if utf8.RuneCountInString(m.GetEmail()) > 128 {
		err := GetCompanyResponseValidationError{
			field:  "Email",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetCompanyResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Link

	// no validation rules for Activity

	if m.GetOwnerId() <= 0 {
		err := GetCompanyResponseValidationError{
			field:  "OwnerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rating

	// no validation rules for Verified

	// no validation rules for Photo

	if len(errors) > 0 {
		return GetCompanyResponseMultiError(errors)
	}
	return nil
}

func (m *GetCompanyResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetCompanyResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetCompanyResponseMultiError is an error wrapping multiple validation errors
// returned by GetCompanyResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCompanyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyResponseMultiError) AllErrors() []error { return m }

// GetCompanyResponseValidationError is the validation error returned by
// GetCompanyResponse.Validate if the designated constraints aren't met.
type GetCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyResponseValidationError) ErrorName() string {
	return "GetCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyResponseValidationError{}

// Validate checks the field values on GetCompanyAndPostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAndPostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyAndPostResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyAndPostResponseMultiError, or nil if none found.
func (m *GetCompanyAndPostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAndPostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for LegalName

	if l := utf8.RuneCountInString(m.GetItn()); l < 10 || l > 12 {
		err := GetCompanyAndPostResponseValidationError{
			field:  "Itn",
			reason: "value length must be between 10 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItn()) < 1 {
		err := GetCompanyAndPostResponseValidationError{
			field:  "Itn",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Psrn

	// no validation rules for Address

	// no validation rules for LegalAddress

	if utf8.RuneCountInString(m.GetEmail()) > 128 {
		err := GetCompanyAndPostResponseValidationError{
			field:  "Email",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetCompanyAndPostResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Link

	// no validation rules for Activity

	if m.GetOwnerId() <= 0 {
		err := GetCompanyAndPostResponseValidationError{
			field:  "OwnerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Rating

	// no validation rules for Verified

	// no validation rules for Post

	// no validation rules for Photo

	if len(errors) > 0 {
		return GetCompanyAndPostResponseMultiError(errors)
	}
	return nil
}

func (m *GetCompanyAndPostResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetCompanyAndPostResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetCompanyAndPostResponseMultiError is an error wrapping multiple validation
// errors returned by GetCompanyAndPostResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCompanyAndPostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAndPostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAndPostResponseMultiError) AllErrors() []error { return m }

// GetCompanyAndPostResponseValidationError is the validation error returned by
// GetCompanyAndPostResponse.Validate if the designated constraints aren't met.
type GetCompanyAndPostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAndPostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAndPostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAndPostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAndPostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAndPostResponseValidationError) ErrorName() string {
	return "GetCompanyAndPostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAndPostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAndPostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAndPostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAndPostResponseValidationError{}

// Validate checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCompanyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCompanyRequestMultiError, or nil if none found.
func (m *UpdateCompanyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCompanyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Address

	// no validation rules for LegalAddress

	if l := utf8.RuneCountInString(m.GetItn()); l < 10 || l > 12 {
		err := UpdateCompanyRequestValidationError{
			field:  "Itn",
			reason: "value length must be between 10 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetItn()) < 1 {
		err := UpdateCompanyRequestValidationError{
			field:  "Itn",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Phone

	// no validation rules for Link

	// no validation rules for Activity

	if m.GetOwnerId() <= 0 {
		err := UpdateCompanyRequestValidationError{
			field:  "OwnerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Post

	// no validation rules for Photo

	if len(errors) > 0 {
		return UpdateCompanyRequestMultiError(errors)
	}
	return nil
}

// UpdateCompanyRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCompanyRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCompanyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCompanyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCompanyRequestMultiError) AllErrors() []error { return m }

// UpdateCompanyRequestValidationError is the validation error returned by
// UpdateCompanyRequest.Validate if the designated constraints aren't met.
type UpdateCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyRequestValidationError) ErrorName() string {
	return "UpdateCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyRequestValidationError{}
