// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/services/company/api.proto

package company_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	GetCompanyById(ctx context.Context, in *GetCompanyRequestById, opts ...grpc.CallOption) (*GetCompanyResponse, error)
	GetCompanyByProductId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetPrivateCompanyResponse, error)
	UpdateCompanyByOwnerId(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*GetCompanyAndPostResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetCompanyById(ctx context.Context, in *GetCompanyRequestById, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, "/services.company_service.CompanyService/GetCompanyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyByProductId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetPrivateCompanyResponse, error) {
	out := new(GetPrivateCompanyResponse)
	err := c.cc.Invoke(ctx, "/services.company_service.CompanyService/GetCompanyByProductId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompanyByOwnerId(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*GetCompanyAndPostResponse, error) {
	out := new(GetCompanyAndPostResponse)
	err := c.cc.Invoke(ctx, "/services.company_service.CompanyService/UpdateCompanyByOwnerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	GetCompanyById(context.Context, *GetCompanyRequestById) (*GetCompanyResponse, error)
	GetCompanyByProductId(context.Context, *IdRequest) (*GetPrivateCompanyResponse, error)
	UpdateCompanyByOwnerId(context.Context, *UpdateCompanyRequest) (*GetCompanyAndPostResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetCompanyById(context.Context, *GetCompanyRequestById) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyById not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyByProductId(context.Context, *IdRequest) (*GetPrivateCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByProductId not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateCompanyByOwnerId(context.Context, *UpdateCompanyRequest) (*GetCompanyAndPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyByOwnerId not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_GetCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.company_service.CompanyService/GetCompanyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyById(ctx, req.(*GetCompanyRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.company_service.CompanyService/GetCompanyByProductId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyByProductId(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompanyByOwnerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompanyByOwnerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.company_service.CompanyService/UpdateCompanyByOwnerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompanyByOwnerId(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.company_service.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyById",
			Handler:    _CompanyService_GetCompanyById_Handler,
		},
		{
			MethodName: "GetCompanyByProductId",
			Handler:    _CompanyService_GetCompanyByProductId_Handler,
		},
		{
			MethodName: "UpdateCompanyByOwnerId",
			Handler:    _CompanyService_UpdateCompanyByOwnerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/services/company/api.proto",
}
