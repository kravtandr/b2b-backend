syntax = "proto3";

package services.chat_service;
option go_package = "b2b/m/pkg/services/chat;chat_service";

import "third_party/go-proto-validators/validator.proto";
import "google/protobuf/empty.proto";


message LoginRequest {
  string email = 1 [(validate.rules).string = {
    email: true,
    max_len: 128,
  }];
  string password = 2 [(validate.rules).string = {
    min_len: 8,
    max_len: 128,
  }];
}


message  RegisterResponse {
  string cookie = 1;
  string token = 2;
}

message LoginResponse {
  string cookie = 1;
  string token = 2;
  string name = 3;
  string description = 4;
  string legal_name = 5;
  string itn = 6;
  string psrn = 7;
  string address = 8;
  string legal_address = 9;
  string email = 10;
  string phone = 11;
  string link = 12;
  string activity = 13;
  int64 owner_id = 14;
  int64 rating = 15;
  int64 verified = 16;
}

message RegisterRequest {
  string email = 1 [(validate.rules).string = {
    email: true,
    max_len: 128,
  }];
  string password = 2 [(validate.rules).string = {
    min_len: 8,
    max_len: 128,
    min_bytes: 1,
  }];
  string name = 3 [(validate.rules).string = {
    max_len: 128,
    min_bytes: 1,
  }];;
  string surname = 4 [(validate.rules).string = {
    max_len: 128,
    min_bytes: 1,
  }];;
}

message GetUserRequest {
  int64 id = 1 [(validate.rules).int64 = {
    gt: 0,
  }];
}

message FastRegisterRequest {
  string name = 1;
  string legal_name = 2;
  string itn = 3;
  string email = 4;
  string password = 5;
  string owner_name = 6;
  string surname = 7;
  string patronymic = 8;
  string country = 9;
  string post = 10;
}



message GetUserResponse {
  string name = 1;
  string surname = 2;
  string email = 3;
  string image = 4;
  string description = 5;
}

message UpdateUserRequest {
  int64 Id = 1;
  string Name = 2;
  string Surname = 3;
  string Patronymic = 4;
  string Email = 5;
  string Password = 6;
}

message Session {
  string token = 1 [(validate.rules).string = {
    min_len: 1,
    min_bytes: 1,
  }];
  string cookie = 2 [(validate.rules).string = {
    min_len: 1,
    min_bytes: 1,
  }];
}

message ValidateSessionResponse {
  int64 user_id = 1;
}

message UserInfo {
  int64 user_id = 1;
  string name = 3 [(validate.rules).string = {
    max_len: 128,
    min_bytes: 1,
  }];;
  string surname = 4 [(validate.rules).string = {
    max_len: 128,
    min_bytes: 1,
  }];;
  string image = 2;
}

message UserEmailRequest {
  string email = 1 [(validate.rules).string = {
    email: true,
    max_len: 128,
  }];
}

message UserId {
  int64 id = 1;
}
message GetUserIdByCookieRequest{
  string hash = 1;
}

message GetPublicUserResponse{
  string Name = 1;
  string Surname = 2;
  string Patronymic = 3;
  string Email = 4;
}

message CheckEmailRequest{
  string email = 1 [(validate.rules).string = {
    email: true,
    max_len: 128,
  }];
}




service ChatService {
//  rpc ValidateSession (Session) returns (ValidateSessionResponse) {}
//  rpc LogoutUser(Session) returns (google.protobuf.Empty) {}
  rpc LoginUser(LoginRequest) returns (LoginResponse) {}
//  rpc FastRegister(FastRegisterRequest) returns (LoginResponse) {}
//  rpc RegisterUser(RegisterRequest) returns (RegisterResponse) {}
//  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
//  rpc UpdateUser(UpdateUserRequest) returns (GetPublicUserResponse) {}
//  rpc GetUserInfo(GetUserRequest) returns (UserInfo) {}
//  rpc GetUserByEmail(UserEmailRequest) returns (UserId) {}
//  rpc GetUserIdByCookie(GetUserIdByCookieRequest) returns (UserId) {}
//  rpc CheckEmail(CheckEmailRequest) returns (GetPublicUserResponse) {}
}