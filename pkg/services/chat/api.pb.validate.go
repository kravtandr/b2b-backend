// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/services/chat/api.proto

package chat_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IdRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdRequestMultiError, or nil
// if none found.
func (m *IdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdRequestMultiError(errors)
	}
	return nil
}

// IdRequestMultiError is an error wrapping multiple validation errors returned
// by IdRequest.ValidateAll() if the designated constraints aren't met.
type IdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRequestMultiError) AllErrors() []error { return m }

// IdRequestValidationError is the validation error returned by
// IdRequest.Validate if the designated constraints aren't met.
type IdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRequestValidationError) ErrorName() string { return "IdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRequestValidationError{}

// Validate checks the field values on IdResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdResponseMultiError, or
// nil if none found.
func (m *IdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IdResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IdResponseMultiError(errors)
	}
	return nil
}

// IdResponseMultiError is an error wrapping multiple validation errors
// returned by IdResponse.ValidateAll() if the designated constraints aren't met.
type IdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdResponseMultiError) AllErrors() []error { return m }

// IdResponseValidationError is the validation error returned by
// IdResponse.Validate if the designated constraints aren't met.
type IdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdResponseValidationError) ErrorName() string { return "IdResponseValidationError" }

// Error satisfies the builtin error interface
func (e IdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdResponseValidationError{}

// Validate checks the field values on ChatAndUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatAndUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatAndUserIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatAndUserIdRequestMultiError, or nil if none found.
func (m *ChatAndUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatAndUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() <= 0 {
		err := ChatAndUserIdRequestValidationError{
			field:  "ChatId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := ChatAndUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChatAndUserIdRequestMultiError(errors)
	}
	return nil
}

// ChatAndUserIdRequestMultiError is an error wrapping multiple validation
// errors returned by ChatAndUserIdRequest.ValidateAll() if the designated
// constraints aren't met.
type ChatAndUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatAndUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatAndUserIdRequestMultiError) AllErrors() []error { return m }

// ChatAndUserIdRequestValidationError is the validation error returned by
// ChatAndUserIdRequest.Validate if the designated constraints aren't met.
type ChatAndUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatAndUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatAndUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatAndUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatAndUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatAndUserIdRequestValidationError) ErrorName() string {
	return "ChatAndUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChatAndUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatAndUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatAndUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatAndUserIdRequestValidationError{}

// Validate checks the field values on CheckIfUniqChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIfUniqChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIfUniqChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIfUniqChatRequestMultiError, or nil if none found.
func (m *CheckIfUniqChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIfUniqChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CheckIfUniqChatRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := CheckIfUniqChatRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckIfUniqChatRequestMultiError(errors)
	}
	return nil
}

// CheckIfUniqChatRequestMultiError is an error wrapping multiple validation
// errors returned by CheckIfUniqChatRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckIfUniqChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIfUniqChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIfUniqChatRequestMultiError) AllErrors() []error { return m }

// CheckIfUniqChatRequestValidationError is the validation error returned by
// CheckIfUniqChatRequest.Validate if the designated constraints aren't met.
type CheckIfUniqChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIfUniqChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIfUniqChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIfUniqChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIfUniqChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIfUniqChatRequestValidationError) ErrorName() string {
	return "CheckIfUniqChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIfUniqChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIfUniqChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIfUniqChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIfUniqChatRequestValidationError{}

// Validate checks the field values on CheckIfUniqChatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIfUniqChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIfUniqChatResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIfUniqChatResponseMultiError, or nil if none found.
func (m *CheckIfUniqChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIfUniqChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Unique

	if len(errors) > 0 {
		return CheckIfUniqChatResponseMultiError(errors)
	}
	return nil
}

// CheckIfUniqChatResponseMultiError is an error wrapping multiple validation
// errors returned by CheckIfUniqChatResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckIfUniqChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIfUniqChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIfUniqChatResponseMultiError) AllErrors() []error { return m }

// CheckIfUniqChatResponseValidationError is the validation error returned by
// CheckIfUniqChatResponse.Validate if the designated constraints aren't met.
type CheckIfUniqChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIfUniqChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIfUniqChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIfUniqChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIfUniqChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIfUniqChatResponseValidationError) ErrorName() string {
	return "CheckIfUniqChatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIfUniqChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIfUniqChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIfUniqChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIfUniqChatResponseValidationError{}

// Validate checks the field values on NewChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NewChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NewChatRequestMultiError,
// or nil if none found.
func (m *NewChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NewChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.GetCreatorId() <= 0 {
		err := NewChatRequestValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := NewChatRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Blured

	if len(errors) > 0 {
		return NewChatRequestMultiError(errors)
	}
	return nil
}

// NewChatRequestMultiError is an error wrapping multiple validation errors
// returned by NewChatRequest.ValidateAll() if the designated constraints
// aren't met.
type NewChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewChatRequestMultiError) AllErrors() []error { return m }

// NewChatRequestValidationError is the validation error returned by
// NewChatRequest.Validate if the designated constraints aren't met.
type NewChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewChatRequestValidationError) ErrorName() string { return "NewChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e NewChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewChatRequestValidationError{}

// Validate checks the field values on GetChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetChatRequestMultiError,
// or nil if none found.
func (m *GetChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCreatorId() <= 0 {
		err := GetChatRequestValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := GetChatRequestValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetChatRequestMultiError(errors)
	}
	return nil
}

// GetChatRequestMultiError is an error wrapping multiple validation errors
// returned by GetChatRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChatRequestMultiError) AllErrors() []error { return m }

// GetChatRequestValidationError is the validation error returned by
// GetChatRequest.Validate if the designated constraints aren't met.
type GetChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChatRequestValidationError) ErrorName() string { return "GetChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChatRequestValidationError{}

// Validate checks the field values on ChatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatResponseMultiError, or
// nil if none found.
func (m *ChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ChatResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.GetCreatorId() <= 0 {
		err := ChatResponseValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := ChatResponseValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Blured

	if len(errors) > 0 {
		return ChatResponseMultiError(errors)
	}
	return nil
}

// ChatResponseMultiError is an error wrapping multiple validation errors
// returned by ChatResponse.ValidateAll() if the designated constraints aren't met.
type ChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatResponseMultiError) AllErrors() []error { return m }

// ChatResponseValidationError is the validation error returned by
// ChatResponse.Validate if the designated constraints aren't met.
type ChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatResponseValidationError) ErrorName() string { return "ChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatResponseValidationError{}

// Validate checks the field values on WriteNewMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteNewMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteNewMsgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteNewMsgRequestMultiError, or nil if none found.
func (m *WriteNewMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteNewMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() <= 0 {
		err := WriteNewMsgRequestValidationError{
			field:  "ChatId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSenderId() <= 0 {
		err := WriteNewMsgRequestValidationError{
			field:  "SenderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReceiverId() <= 0 {
		err := WriteNewMsgRequestValidationError{
			field:  "ReceiverId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Checked

	// no validation rules for Text

	// no validation rules for Type

	// no validation rules for Time

	if len(errors) > 0 {
		return WriteNewMsgRequestMultiError(errors)
	}
	return nil
}

// WriteNewMsgRequestMultiError is an error wrapping multiple validation errors
// returned by WriteNewMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type WriteNewMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteNewMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteNewMsgRequestMultiError) AllErrors() []error { return m }

// WriteNewMsgRequestValidationError is the validation error returned by
// WriteNewMsgRequest.Validate if the designated constraints aren't met.
type WriteNewMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteNewMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteNewMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteNewMsgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteNewMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteNewMsgRequestValidationError) ErrorName() string {
	return "WriteNewMsgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteNewMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteNewMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteNewMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteNewMsgRequestValidationError{}

// Validate checks the field values on MsgResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgResponseMultiError, or
// nil if none found.
func (m *MsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := MsgResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ChatId

	if m.GetSenderId() <= 0 {
		err := MsgResponseValidationError{
			field:  "SenderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReceiverId() <= 0 {
		err := MsgResponseValidationError{
			field:  "ReceiverId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SenderName

	// no validation rules for ReceiverName

	// no validation rules for Checked

	// no validation rules for Text

	// no validation rules for Type

	// no validation rules for Time

	if len(errors) > 0 {
		return MsgResponseMultiError(errors)
	}
	return nil
}

// MsgResponseMultiError is an error wrapping multiple validation errors
// returned by MsgResponse.ValidateAll() if the designated constraints aren't met.
type MsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgResponseMultiError) AllErrors() []error { return m }

// MsgResponseValidationError is the validation error returned by
// MsgResponse.Validate if the designated constraints aren't met.
type MsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgResponseValidationError) ErrorName() string { return "MsgResponseValidationError" }

// Error satisfies the builtin error interface
func (e MsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgResponseValidationError{}

// Validate checks the field values on ChatAndLastMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChatAndLastMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatAndLastMsgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChatAndLastMsgResponseMultiError, or nil if none found.
func (m *ChatAndLastMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatAndLastMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ChatAndLastMsgResponseValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if m.GetCreatorId() <= 0 {
		err := ChatAndLastMsgResponseValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductId() <= 0 {
		err := ChatAndLastMsgResponseValidationError{
			field:  "ProductId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Blured

	if all {
		switch v := interface{}(m.GetMsg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatAndLastMsgResponseValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatAndLastMsgResponseValidationError{
					field:  "Msg",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMsg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatAndLastMsgResponseValidationError{
				field:  "Msg",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChatAndLastMsgResponseMultiError(errors)
	}
	return nil
}

// ChatAndLastMsgResponseMultiError is an error wrapping multiple validation
// errors returned by ChatAndLastMsgResponse.ValidateAll() if the designated
// constraints aren't met.
type ChatAndLastMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatAndLastMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatAndLastMsgResponseMultiError) AllErrors() []error { return m }

// ChatAndLastMsgResponseValidationError is the validation error returned by
// ChatAndLastMsgResponse.Validate if the designated constraints aren't met.
type ChatAndLastMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatAndLastMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatAndLastMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatAndLastMsgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatAndLastMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatAndLastMsgResponseValidationError) ErrorName() string {
	return "ChatAndLastMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChatAndLastMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatAndLastMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatAndLastMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatAndLastMsgResponseValidationError{}

// Validate checks the field values on Bool with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bool with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BoolMultiError, or nil if none found.
func (m *Bool) ValidateAll() error {
	return m.validate(true)
}

func (m *Bool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return BoolMultiError(errors)
	}
	return nil
}

// BoolMultiError is an error wrapping multiple validation errors returned by
// Bool.ValidateAll() if the designated constraints aren't met.
type BoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolMultiError) AllErrors() []error { return m }

// BoolValidationError is the validation error returned by Bool.Validate if the
// designated constraints aren't met.
type BoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolValidationError) ErrorName() string { return "BoolValidationError" }

// Error satisfies the builtin error interface
func (e BoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolValidationError{}

// Validate checks the field values on MsgsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgsResponseMultiError, or
// nil if none found.
func (m *MsgsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMsgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MsgsResponseValidationError{
						field:  fmt.Sprintf("Msgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MsgsResponseValidationError{
						field:  fmt.Sprintf("Msgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MsgsResponseValidationError{
					field:  fmt.Sprintf("Msgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MsgsResponseMultiError(errors)
	}
	return nil
}

// MsgsResponseMultiError is an error wrapping multiple validation errors
// returned by MsgsResponse.ValidateAll() if the designated constraints aren't met.
type MsgsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgsResponseMultiError) AllErrors() []error { return m }

// MsgsResponseValidationError is the validation error returned by
// MsgsResponse.Validate if the designated constraints aren't met.
type MsgsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgsResponseValidationError) ErrorName() string { return "MsgsResponseValidationError" }

// Error satisfies the builtin error interface
func (e MsgsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgsResponseValidationError{}

// Validate checks the field values on GetAllUserChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllUserChatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllUserChatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllUserChatsResponseMultiError, or nil if none found.
func (m *GetAllUserChatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllUserChatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllUserChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllUserChatsResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllUserChatsResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllUserChatsResponseMultiError(errors)
	}
	return nil
}

// GetAllUserChatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllUserChatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllUserChatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllUserChatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllUserChatsResponseMultiError) AllErrors() []error { return m }

// GetAllUserChatsResponseValidationError is the validation error returned by
// GetAllUserChatsResponse.Validate if the designated constraints aren't met.
type GetAllUserChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllUserChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllUserChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllUserChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllUserChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllUserChatsResponseValidationError) ErrorName() string {
	return "GetAllUserChatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllUserChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllUserChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllUserChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllUserChatsResponseValidationError{}

// Validate checks the field values on GetAllChatsAndLastMsgResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllChatsAndLastMsgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllChatsAndLastMsgResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllChatsAndLastMsgResponseMultiError, or nil if none found.
func (m *GetAllChatsAndLastMsgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllChatsAndLastMsgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllChatsAndLastMsgResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllChatsAndLastMsgResponseValidationError{
						field:  fmt.Sprintf("Chats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllChatsAndLastMsgResponseValidationError{
					field:  fmt.Sprintf("Chats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllChatsAndLastMsgResponseMultiError(errors)
	}
	return nil
}

// GetAllChatsAndLastMsgResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllChatsAndLastMsgResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllChatsAndLastMsgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllChatsAndLastMsgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllChatsAndLastMsgResponseMultiError) AllErrors() []error { return m }

// GetAllChatsAndLastMsgResponseValidationError is the validation error
// returned by GetAllChatsAndLastMsgResponse.Validate if the designated
// constraints aren't met.
type GetAllChatsAndLastMsgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllChatsAndLastMsgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllChatsAndLastMsgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllChatsAndLastMsgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllChatsAndLastMsgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllChatsAndLastMsgResponseValidationError) ErrorName() string {
	return "GetAllChatsAndLastMsgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllChatsAndLastMsgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllChatsAndLastMsgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllChatsAndLastMsgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllChatsAndLastMsgResponseValidationError{}

// Validate checks the field values on UpdateChatStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChatStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChatStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChatStatusRequestMultiError, or nil if none found.
func (m *UpdateChatStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChatStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetChatId() <= 0 {
		err := UpdateChatStatusRequestValidationError{
			field:  "ChatId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Blured

	if len(errors) > 0 {
		return UpdateChatStatusRequestMultiError(errors)
	}
	return nil
}

// UpdateChatStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChatStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChatStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChatStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChatStatusRequestMultiError) AllErrors() []error { return m }

// UpdateChatStatusRequestValidationError is the validation error returned by
// UpdateChatStatusRequest.Validate if the designated constraints aren't met.
type UpdateChatStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChatStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChatStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChatStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChatStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChatStatusRequestValidationError) ErrorName() string {
	return "UpdateChatStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChatStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChatStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChatStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChatStatusRequestValidationError{}
