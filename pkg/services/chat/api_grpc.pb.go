// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/services/chat/api.proto

package chat_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	CheckIfUniqChat(ctx context.Context, in *CheckIfUniqChatRequest, opts ...grpc.CallOption) (*CheckIfUniqChatResponse, error)
	NewChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	WriteNewMsg(ctx context.Context, in *WriteNewMsgRequest, opts ...grpc.CallOption) (*IdResponse, error)
	GetMsgsFromChat(ctx context.Context, in *ChatAndUserIdRequest, opts ...grpc.CallOption) (*MsgsResponse, error)
	GetAllUserChats(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllUserChatsResponse, error)
	GetAllChatsAndLastMsg(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllChatsAndLastMsgResponse, error)
	ChatHealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CheckIfUniqChat(ctx context.Context, in *CheckIfUniqChatRequest, opts ...grpc.CallOption) (*CheckIfUniqChatResponse, error) {
	out := new(CheckIfUniqChatResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/CheckIfUniqChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) NewChat(ctx context.Context, in *NewChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/NewChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) WriteNewMsg(ctx context.Context, in *WriteNewMsgRequest, opts ...grpc.CallOption) (*IdResponse, error) {
	out := new(IdResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/WriteNewMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMsgsFromChat(ctx context.Context, in *ChatAndUserIdRequest, opts ...grpc.CallOption) (*MsgsResponse, error) {
	out := new(MsgsResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/GetMsgsFromChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAllUserChats(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllUserChatsResponse, error) {
	out := new(GetAllUserChatsResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/GetAllUserChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAllChatsAndLastMsg(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*GetAllChatsAndLastMsgResponse, error) {
	out := new(GetAllChatsAndLastMsgResponse)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/GetAllChatsAndLastMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatHealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/services.chat_service.ChatService/ChatHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	CheckIfUniqChat(context.Context, *CheckIfUniqChatRequest) (*CheckIfUniqChatResponse, error)
	NewChat(context.Context, *NewChatRequest) (*ChatResponse, error)
	GetChat(context.Context, *GetChatRequest) (*ChatResponse, error)
	WriteNewMsg(context.Context, *WriteNewMsgRequest) (*IdResponse, error)
	GetMsgsFromChat(context.Context, *ChatAndUserIdRequest) (*MsgsResponse, error)
	GetAllUserChats(context.Context, *IdRequest) (*GetAllUserChatsResponse, error)
	GetAllChatsAndLastMsg(context.Context, *IdRequest) (*GetAllChatsAndLastMsgResponse, error)
	ChatHealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) CheckIfUniqChat(context.Context, *CheckIfUniqChatRequest) (*CheckIfUniqChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUniqChat not implemented")
}
func (UnimplementedChatServiceServer) NewChat(context.Context, *NewChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChat not implemented")
}
func (UnimplementedChatServiceServer) GetChat(context.Context, *GetChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatServiceServer) WriteNewMsg(context.Context, *WriteNewMsgRequest) (*IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteNewMsg not implemented")
}
func (UnimplementedChatServiceServer) GetMsgsFromChat(context.Context, *ChatAndUserIdRequest) (*MsgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgsFromChat not implemented")
}
func (UnimplementedChatServiceServer) GetAllUserChats(context.Context, *IdRequest) (*GetAllUserChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserChats not implemented")
}
func (UnimplementedChatServiceServer) GetAllChatsAndLastMsg(context.Context, *IdRequest) (*GetAllChatsAndLastMsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllChatsAndLastMsg not implemented")
}
func (UnimplementedChatServiceServer) ChatHealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHealthCheck not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CheckIfUniqChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUniqChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CheckIfUniqChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/CheckIfUniqChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CheckIfUniqChat(ctx, req.(*CheckIfUniqChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_NewChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).NewChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/NewChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).NewChat(ctx, req.(*NewChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_WriteNewMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteNewMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).WriteNewMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/WriteNewMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).WriteNewMsg(ctx, req.(*WriteNewMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMsgsFromChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatAndUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMsgsFromChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/GetMsgsFromChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMsgsFromChat(ctx, req.(*ChatAndUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAllUserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAllUserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/GetAllUserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAllUserChats(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAllChatsAndLastMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAllChatsAndLastMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/GetAllChatsAndLastMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAllChatsAndLastMsg(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ChatHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.chat_service.ChatService/ChatHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ChatHealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.chat_service.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIfUniqChat",
			Handler:    _ChatService_CheckIfUniqChat_Handler,
		},
		{
			MethodName: "NewChat",
			Handler:    _ChatService_NewChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatService_GetChat_Handler,
		},
		{
			MethodName: "WriteNewMsg",
			Handler:    _ChatService_WriteNewMsg_Handler,
		},
		{
			MethodName: "GetMsgsFromChat",
			Handler:    _ChatService_GetMsgsFromChat_Handler,
		},
		{
			MethodName: "GetAllUserChats",
			Handler:    _ChatService_GetAllUserChats_Handler,
		},
		{
			MethodName: "GetAllChatsAndLastMsg",
			Handler:    _ChatService_GetAllChatsAndLastMsg_Handler,
		},
		{
			MethodName: "ChatHealthCheck",
			Handler:    _ChatService_ChatHealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/services/chat/api.proto",
}
