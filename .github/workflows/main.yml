name: GitHub Actions b2b backend
run-name: ${{ github.actor }} Deploy ðŸš€
on:
  push:
    branches:
      - main

jobs:
  stop:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: SSH Setup & Stop
        uses: appleboy/ssh-action@master
        with:
            host: ${{secrets.SSH_HOST}}
            username: ${{secrets.SSH_USER}}
            key: ${{secrets.SSH_PRIVATE_KEY}}
            port: 22
            script: | 
              bash /root/b2b-backend/.github/workflows/scripts/stop.sh;
              bash /root/b2b-backend/.github/workflows/scripts/pull.sh;
              bash /root/b2b-backend/.github/workflows/scripts/clean.sh;

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./scripts
        shell: bash
    needs: stop
    steps:
      - name: SSH Setup
        uses: appleboy/ssh-action@master
        env:
          ENDPOINT: ${{env.ENDPOINT}}
          MINIO_ROOT_USER: ${{env.MINIO_ROOT_USER}}
          MINIO_ROOT_PASSWORD: ${{env.MINIO_ROOT_PASSWORD}}
          POSTGRES_DB: ${{env.POSTGRES_DB}}
          POSTGRES_USER: ${{env.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{env.POSTGRES_PASSWORD}}
          DADATA_API_KEY: ${{env.DADATA_API_KEY}}
          DADATA_SECRET_KEY: ${{env.DADATA_SECRET_KEY}}
          UKASSA_SECRET_KEY: ${{env.UKASSA_SECRET_KEY}}
          UKASSA_SHOP_ID: ${{env.UKASSA_SHOP_ID}}
        with:
            host: ${{secrets.SSH_HOST}}
            username: ${{secrets.SSH_USER}}
            key: ${{secrets.SSH_PRIVATE_KEY}}
            port: 22
            script: |
              bash /root/b2b-backend/.github/workflows/scripts/build.sh;


  start:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [build, stop]
    steps:
      - name: SSH Setup
        uses: appleboy/ssh-action@master
        with:
            host: ${{secrets.SSH_HOST}}
            username: ${{secrets.SSH_USER}}
            key: ${{secrets.SSH_PRIVATE_KEY}}
            port: 22
            script: |
              bash /root/b2b-backend/.github/workflows/scripts/start.sh;


  notify:
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: [stop, build, start]  
    steps:
      - name: Notify Telegram on success
        if: ${{needs.stop.result == 'success' && needs.build.result == 'success' && needs.start.result == 'success'}}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{secrets.BOT_TOKEN}}/sendMessage" \
            -d chat_id="${{secrets.CHAT_ID}}" \
            -d text="[Backend] [${{github.actor}}]%0A===Successfully Deploy===%0Ahttps://bi-tu-bi.ru/%0A${{ github.event.head_commit.message }}"

      - name: Notify Telegram on failure
        if: ${{needs.stop.result == 'failure' || needs.build.result == 'failure'|| needs.start.result == 'failure'}}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{secrets.BOT_TOKEN}}/sendMessage" \
            -d chat_id="${{secrets.CHAT_ID }}" \
            -d text="[Backend] [${{github.actor}}]%0A=!=Deployment Failed=!=%0Ahttps://bi-tu-bi.ru/%0A${{ github.event.head_commit.message }}"


        # - name: Debug
        # if: always()
        # run: |
        #   curl -s -X POST "https://api.telegram.org/bot${{secrets.BOT_TOKEN}}/sendMessage" \
        #     -d chat_id="${{secrets.CHAT_ID}}" \
        #     -d text="Status:%0A${{needs.stop.result}}%0A${{needs.build.result}}%0A${{needs.start.result}}%0ACondition OK:${{needs.stop.result == 'success' && needs.build.result == 'success' && needs.start.result == 'success'}}%0Condition Failure: ${{needs.stop.result == 'failure' || needs.build.result == 'failure'|| needs.start.result == 'failure'}}"
